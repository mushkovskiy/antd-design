import { useMutation } from '@tanstack/react-query';
import type { UseMutationOptions, UseMutationResult } from '@tanstack/react-query';
import { useState, useCallback } from 'react';

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–∞—Ç—á-–º—É—Ç–∞—Ü–∏–∏
 */
export interface BatchMutationConfig<TData, TVariables, TError = Error> {
  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å –±–∞—Ç—á–µ–º –¥–∞–Ω–Ω—ã—Ö
   * –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –µ—Å–ª–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç batchSize
   * –ù–∞–ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ 1300 ID –∏ batchSize=500, —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ 3 —Ä–∞–∑–∞:
   * - 1-–π –≤—ã–∑–æ–≤: –º–∞—Å—Å–∏–≤ –∏–∑ 500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * - 2-–π –≤—ã–∑–æ–≤: –º–∞—Å—Å–∏–≤ –∏–∑ 500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * - 3-–π –≤—ã–∑–æ–≤: –º–∞—Å—Å–∏–≤ –∏–∑ 300 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  mutationFn: (batch: TVariables[]) => Promise<TData>;
  
  /**
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500)
   */
  batchSize?: number;
  
  /**
   * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è useMutation
   */
  mutationOptions?: Omit<
    UseMutationOptions<BatchMutationResult<TData>, TError, TVariables[]>,
    'mutationFn'
  >;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á-–º—É—Ç–∞—Ü–∏–∏
 */
export interface BatchMutationResult<TData> {
  /**
   * –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
   */
  data: TData[];
  
  /**
   * –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞—Ç—á–µ–π
   */
  totalBatches: number;
  
  /**
   * –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π
   */
  completedBatches: number;
  
  /**
   * –û—à–∏–±–∫–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞—Ç—á–µ–π
   */
  errors: Error[];
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç useMutation —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –±–∞—Ç—á-–æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export interface UseBatchMutationResult<TData, TVariables, TError = Error>
  extends Omit<UseMutationResult<BatchMutationResult<TData>, TError, TVariables[]>, 'mutate' | 'mutateAsync'> {
  /**
   * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–∞—Ç—á-–º—É—Ç–∞—Ü–∏–∏
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏—Ç –Ω–∞ –±–∞—Ç—á–∏
   */
  mutateBatch: (items: TVariables[]) => void;
  
  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è mutateBatch
   */
  mutateBatchAsync: (items: TVariables[]) => Promise<BatchMutationResult<TData>>;
  
  /**
   * –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
   */
  progress: number;
}

/**
 * –†–∞–∑–±–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞ —á–∞—Å—Ç–∏ (chunks) –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
 */
function chunkArray<T>(array: T[], size: number): T[][] {
  const chunks: T[][] = [];
  for (let i = 0; i < array.length; i += size) {
    chunks.push(array.slice(i, i + size));
  }
  return chunks;
}

/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á-–º—É—Ç–∞—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
 * 1. –í—ã –ø–µ—Ä–µ–¥–∞—ë—Ç–µ –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1300 ID)
 * 2. –•—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ –±–∞—Ç—á–∏ –ø–æ batchSize —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 500)
 * 3. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è mutationFn —Å –º–∞—Å—Å–∏–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * 4. –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
 * 5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤–º–µ—Å—Ç–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 * 
 * @example
 * ```tsx
 * const fetchUsers = useBatchMutation({
 *   // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å –º–∞—Å—Å–∏–≤–æ–º –¥–æ 500 ID
 *   mutationFn: async (userIds: string[]) => {
 *     const response = await fetch('/api/users', {
 *       method: 'POST',
 *       body: JSON.stringify({ ids: userIds })
 *     });
 *     return response.json();
 *   },
 *   batchSize: 500, // –†–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
 *   mutationOptions: {
 *     onSuccess: (result) => {
 *       console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–æ ${result.totalBatches} –∑–∞–ø—Ä–æ—Å–æ–≤`);
 *       console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${result.data.length} –æ—Ç–≤–µ—Ç–æ–≤`);
 *     }
 *   }
 * });
 * 
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 * const handleFetch = async () => {
 *   const userIds = parseFile(); // –ü–æ–ª—É—á–∞–µ–º 1300 ID
 *   // –•—É–∫ —Ä–∞–∑–æ–±—å—ë—Ç —ç—Ç–æ –Ω–∞ 3 –∑–∞–ø—Ä–æ—Å–∞: 500, 500, 300
 *   await fetchUsers.mutateBatchAsync(userIds);
 * };
 * ```
 */
export function useBatchMutation<TData = unknown, TVariables = unknown, TError = Error>({
  mutationFn,
  batchSize = 500,
  mutationOptions,
}: BatchMutationConfig<TData, TVariables, TError>): UseBatchMutationResult<TData, TVariables, TError> {
  const [progress, setProgress] = useState(0);

  // –û—Å–Ω–æ–≤–Ω–∞—è –º—É—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –±–∞—Ç—á–∏
  const mutation = useMutation<BatchMutationResult<TData>, TError, TVariables[]>({
    mutationFn: async (items: TVariables[]) => {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      setProgress(0);
      
      // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
      const batches = chunkArray(items, batchSize);
      
      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      if (batches.length === 0) {
        return {
          data: [],
          totalBatches: 0,
          completedBatches: 0,
          errors: [],
        };
      }

      // –°–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
      // –ö–∞–∂–¥—ã–π –±–∞—Ç—á - —ç—Ç–æ –º–∞—Å—Å–∏–≤ –¥–æ batchSize —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      // –ù–∞–ø—Ä–∏–º–µ—Ä: [500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤], [500 —ç–ª–µ–º–µ–Ω—Ç–æ–≤], [300 —ç–ª–µ–º–µ–Ω—Ç–æ–≤]
      let completedCount = 0;
      const batchPromises = batches.map((batch, index) =>
        // –í—ã–∑—ã–≤–∞–µ–º mutationFn –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        mutationFn(batch)
          .then((result) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completedCount++;

            setProgress(Math.round((completedCount / batches.length) * 100));
            return { success: true as const, data: result, index };
          })
          .catch((error: Error) => {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            completedCount++;
            setProgress(Math.round((completedCount / batches.length) * 100));
            return { success: false as const, error, index };
          })
      );

      // –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ç—á–µ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const results = await Promise.all(batchPromises);

      // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const successfulResults: TData[] = [];
      const errors: Error[] = [];

      results.forEach((result) => {
        if (result.success) {
          successfulResults.push(result.data);
        } else {
          errors.push(result.error);
        }
      });

      // –ï—Å–ª–∏ –≤—Å–µ –±–∞—Ç—á–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –æ—à–∏–±–∫—É
      if (successfulResults.length === 0 && errors.length > 0) {
        throw errors[0];
      }

      return {
        data: successfulResults,
        totalBatches: batches.length,
        completedBatches: results.filter((r) => r.success).length,
        errors,
      };
    },
    ...mutationOptions,
  });

  // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è mutate
  const mutateBatch = useCallback(
    (items: TVariables[]) => {
      mutation.mutate(items);
    },
    [mutation]
  );

  // –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è mutateAsync
  const mutateBatchAsync = useCallback(
    async (items: TVariables[]): Promise<BatchMutationResult<TData>> => {
      return mutation.mutateAsync(items);
    },
    [mutation]
  );
  console.log("üöÄ ~ useBatchMutation ~ progress:", progress)
  return {
    ...mutation,
    mutateBatch,
    mutateBatchAsync,
    progress,
  };
}

